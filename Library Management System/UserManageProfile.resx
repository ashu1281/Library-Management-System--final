<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="userImage.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        /9j/4AAQSkZJRgABAQEBLAEsAAD/4QBWRXhpZgAATU0AKgAAAAgABAEaAAUAAAABAAAAPgEbAAUAAAAB
        AAAARgEoAAMAAAABAAIAAAITAAMAAAABAAEAAAAAAAAAAAEsAAAAAQAAASwAAAAB/9sAQwAFAwQEBAMF
        BAQEBQUFBgcMCAcHBwcPCwsJDBEPEhIRDxERExYcFxMUGhURERghGBodHR8fHxMXIiQiHiQcHh8e/9sA
        QwEFBQUHBgcOCAgOHhQRFB4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4e
        Hh4eHh4e/8AAEQgBaAFoAwERAAIRAQMRAf/EAB0AAQADAQADAQEAAAAAAAAAAAAGBwgJAgMFAQT/xABB
        EAEAAQMDAQQGBgcHBAMAAAAAAQIDBAUGEQcSIUFRCBMYIjFhMlZxgZTRCRRCYoKRkkNSY3KiscEVFqGy
        IzOz/8QAGAEBAAMBAAAAAAAAAAAAAAAAAAIDBAH/xAAiEQEBAQADAAIDAAMBAAAAAAAAAQIDERMxURIh
        QQQiYRT/2gAMAwEAAhEDEQA/ANlgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAh++up2wdjxxujdOm6fe8Mebnbvz9lujmv8A8JTGtfCN1Ip/X/TE6b4dVVvStK3D
        qtUTxFdOPRYoq+cTXV2v9KycGkLy5j4MempoHrOJ2Jq3Y8/121z/AC4/5d8L9ue0SLb/AKYPTTOrot6p
        p+4NIqmeJruY1N63T99uqav9Ll4NR2cuauLY3UbY+97Xb2tufTdTqiOarNu7xepj526uK4++Fdzc/Kya
        lSpF0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABH9/by25sXbt7Xtz6nawMK13RNXfXcr8KKKY766
        p8Ij/Z2Zur1HLemIOtHpSby3fevadtKu9tfRJmaYqtVx+uX6fOq5H/1/5aP6pascMnyz75u/hn+7cuXb
        td27XVXcrntV11TM1VT5zM98yuU22vF1wAB7Ma/fxsm3k4165Yv2qoqt3bdc010THwmKo74n7HLO3ZbG
        i+inpV7q2zes6Xvn125NH5in9amY/XbEefa+F2PlV7373gp3wy/C7HL9ttbN3RoO8Nv4+vbb1OxqOn5E
        e5dtT8Jj401RPfTVHjTPEwy2WXqtEvb7DjoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACO9R946JsLZ+
        dufX8j1WHiUc9mnia7tc91NuiPGqqe6I++e6Jdzm6vUct6jmv1l6mbi6obrua1rd6bePRNVODg0Vc2sS
        3M/Rp86p7u1V8Zn5cRG7GJmMe93VQhNAAAAAABYnQnqzr/SrdNOoadXXk6VkVUxqOm1V8UZFHnH925Ef
        Rq+6eYlXyYmos4+T8a6SbJ3No28dr4G5NAyoydPzrUXLVfHEx4TTVHhVE8xMeExLFZZeq1y9vsuOgAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAOevpm9Ubm+Ootzb2nZEzoOgXarFuKZ92/kx3Xbvz4nmin5RM/tN
        nDj8Z2y8u+70ohcpAAAAAAAAaN9B7qjd2vvmNkapkVf9G165FOP2qvdx8zjimY8ouRHZn59j5qObHc7i
        /h3/ACt6MjSAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgHpDbxq2L0f3BuCxc7GZRjeow5ie/192fV0TH
        2TV2v4U8Z/LUiOr1HL2qZmZmqqapn4zPxn5tzFb2OuAAAAAAAAPPHvXsfIt5GPdqtXrVcV27lM8TRVE8
        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
        AAAAAAAAAAAAAAAAAAAAAA//2Q==
</value>
  </data>
</root>